Φ(S, [x := e]l) = φ(S,x,e,l) 		
    Go syntax: x := e (e is a primitive type) [a := "Hello"]
        ssa.Alloc | ssa.Store | ssa.UnOp.Op == token.MUL [load the value of a pointer] 
    Go syntax: x := e (e is a pointer value) [b := t.a]
        ssa.Alloc | ssa.FieldAddr | ssa.UnOp | ssa.Store | ssa.UnOp
    Go syntax: x = e (e is a primtiv type) [a = "Hei"]
	ssa.Store
    Go syntax: x = e (e is a pointer value) [b = t.a]
	ssa.FieldAddr | ssa.UnOp | ssa.Store
Φ(S, [x.f := e]l) = φ(S, x.f, e, l)	
    Go syntax: x.f = e (e is a primitive type) [t.a = "World"]
        ssa.FieldAddr | ssa.Store 
    Go syntax: x.f = e (e is a pointer value) [u.a = t.a]
        ssa.FieldAddr | ssa.FieldAddr | ssa.UnOp.Op == token.MUL | *ssa.Store
Φ(S, [defer((λx.s)v)]l) = id(S)
Φ(S, [go s]l) = id(S)
Φ(S, [x → ch]l) = S[ch → S(x)]
Φ(S, [x ← ch]l) = S[x → U{TA(l′)↓ch′| [x′ → ch′]^l′ f.a. (l : ch,l′ : ch′) ∈ PTA(P)}]
    ssa.UnOp.Op = token.ARROW 
Φ(S, [return v]l) = id(S)
